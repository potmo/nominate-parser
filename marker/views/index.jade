doctype html
html
  head
    title=page.name
    script(src="http://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js")
    script(src="http://twitter.github.io/typeahead.js/releases/latest/typeahead.bundle.js")
    script var page = !{JSON.stringify(page)}
    script var book = !{JSON.stringify(book)}
    script var chamber = !{JSON.stringify(chamber)}
    script var seatings = !{JSON.stringify(seatings)}
    script var book_index = !{JSON.stringify(book_index)}

  body
    div(style="background-image: url(../image/#{page.image}); background-position: bottom left; background-size: auto 600px; background-repeat: repeat-y;")
        div(style="background-color: #FFFFFF;display: inline;").
            <b>#{book.start_year}-#{book.end_year}</b> #{book.book}#{book.book_letter}-#{book.book_number_type} <i>#{book.chamber} chamber</i> (session: #{book.sessiontype}) page: <b>#{page.page}/#{book.total_pages}</b> (status: #{page.status}, autodetect: #{page.detected_now ? 'yes' : 'no'})
        br
        div(style="background-color: #FFFFFF;display: inline;")
            | book type: 
            input(type="radio", name="book_type", value="0", checked=book.type=="unknown")
            | unknown 
            input(type="radio", name="book_type", value="0", checked=book.type=="grid")
            | grid 
            input(type="radio", name="book_type", value="0", checked=book.type=="handwritten")
            | handwritten 

        - var voteStyle= ''
        if page.votes.total.yes + page.votes.total.no + page.votes.total.refrain + page.votes.total.absent != chamber.seats
            -voteStyle= "background-color: rgb(255,0,0)"
        else
            -voteStyle= "background-color: rgb(255,255,255)"
        br
        div(style="background-color: #FFFFFF;display: inline;").
            <a href="/pageeditor/!{page.id - 1}">previous page</a>
            <a href="/pageeditor/!{page.id + 1}">next page</a><br>
            <a href="/pageeditor/!{page.id - page.page + 1}">first page</a>
            <a href="/pageeditor/!{page.id - page.page + book.total_pages}">last page</a>
            <a href="/pageeditor/!{page.id - page.page}">previous book</a>
            <a href="/pageeditor/!{page.id + book.total_pages - page.page + 1}">next book</a>

        div( id="votecontainer")
            table(border=1 style=voteStyle)
                tr
                    td Yes: #{page.votes.total.yes}
                    td Refrain: #{page.votes.total.refrain}
                tr
                    td No: #{page.votes.total.no}
                    td Absent: #{page.votes.total.absent}
                tr
                    td(colspan=2) Missing: #{page.votes.total.missing}
                tr
                    td(colspan=2) Total counted: #{page.votes.total.yes + page.votes.total.no + page.votes.total.refrain + page.votes.total.absent}

    script.
        document.onkeydown = function(evt) {
            evt = evt || window.event;
            switch(evt.keyCode){
                case 37: // left
                    //window.location.href = "/pageeditor/" + (page.id - 1);
                    break;
                case 39: // right
                    //window.location.href = "/pageeditor/" + (page.id + 1);
                    break;
                case 13: // enter
                    //readPage();
                    //break;
            }
        };

    div.
        <script>
            

            var selectedHandle = null;
            var handles = [];
            var canvas;
            var context;


            function onLoaded(){

                var image = document.getElementById("originalimage");
                canvas = document.getElementById("gridcanvas");
                document.getElementById('imagecontainer').appendChild(image);

                document.getElementById('imagecontainer').appendChild(canvas);
                canvas.width = image.width;
                canvas.height = image.height;

                context = canvas.getContext('2d');
                context.strokeStyle = 'rgba(255,0,0,1.0)';
                context.fillStyle = 'rgba(255,0,0,0.2)';

                handles = page.coordinates.map(function(coordinate, index){
                    return {radius: 10,
                            x: coordinate.x * canvas.width,
                            y: coordinate.y * canvas.height,
                            index: index};
                });


                canvas.addEventListener('mousedown', function(event){
                    var mouse = {x: event.offsetX, y: event.offsetY};

                    selectedHandle = handles
                        .concat()
                        //.filter(function(handle){
                        //    return dist(mouse, handle) < handle.radius;
                        //})
                        .sort(function(a,b){
                            return dist(mouse,b) - dist(mouse, a);
                        })
                        .pop();

                    if (selectedHandle) {
                        selectedHandle.x = mouse.x;
                        selectedHandle.y = mouse.y;
                    }
                });

                canvas.addEventListener('mouseup', function(){
                    selectedHandle = null;
                });

                canvas.addEventListener('mousemove', function(event){
                    var mouse = {x: event.offsetX, y: event.offsetY};
                    if (selectedHandle) {
                        selectedHandle.x = mouse.x;
                        selectedHandle.y = mouse.y;
                    }
                });

                window.requestAnimationFrame(step);
            }

            function getRatios() {
                var verticalRatios;
                var horizontalRatios;
                switch (chamber.name) {
                    case 'first':
                        var move = 0;
                        verticalRatios = [
                            move+=.097, 
                            move+=.097,
                            move+=.097, 
                            move+=.097, 
                            move+=.097, 
                            move+=.031, 
                            move+=.097, 
                            move+=.097, 
                            move+=.097, 
                            move+=.097
                        ];

                        horizontalRatios = Array(15)
                            .fill(1/16 - 0.0003)
                            .map((item, index) => item * (index + 1));
                        break;

                    case 'second':
                        var move = 0;
                        verticalRatios = [
                            move+=.097, 
                            move+=.097,
                            move+=.097, 
                            move+=.097, 
                            move+=.097, 
                            move+=.031, 
                            move+=.097, 
                            move+=.097, 
                            move+=.097, 
                            move+=.097
                        ];

                        horizontalRatios = Array(23)
                            .fill(1/24 - 0.0003)
                            .map((item, index) => item * (index + 1));
                        break;
                }

                return {verticalRatios, horizontalRatios};
            }

            function getSquarePositions() {
                var {verticalRatios, horizontalRatios} = getRatios();

                verticalRatios.push(1.0);
                horizontalRatios.push(1.0)

                var squares = [];
                var yPos = 0;
                var i = 0;
                for (var y = 0; y < horizontalRatios.length; y++) {
                    var xPos = 0;
                    var newYPos = horizontalRatios[y];
                    var height = newYPos - yPos;
                    for (var x = 0; x < verticalRatios.length; x++) {
                        
                        
                        var newXPos = verticalRatios[x];
                        var width = newXPos - xPos;
                        squares.push({x: xPos, 
                                      y: yPos, 
                                      indexX: x,
                                      indexY: y,
                                      width: width, 
                                      height: height, 
                                      id: i++});
                        xPos += width;
                    }

                    yPos += height;
                }

                // remove the squares in the middle line
                squares = squares.filter((square)=> {
                  return square.indexX  != 5;
                });

                squares = squares.map((square, index)=>{
                  square.id = index;
                  return square;
                });

                return squares;
            }


            function step(timestamp){

                
                var {verticalRatios, horizontalRatios} = getRatios();
            
                context.clearRect(0, 0, canvas.width, canvas.height);
                handles.forEach(function(handle){
                    context.beginPath();
                    context.arc(handle.x, handle.y, handle.radius, 0, 2 * Math.PI);
                    context.fill();
                });

                var upperDist = dist(handles[0], handles[1]);
                var upperDir = {x: (handles[1].x - handles[0].x) / upperDist, y: (handles[1].y - handles[0].y) / upperDist};

                var lowerDist = dist(handles[3], handles[2]);
                var lowerDir = {x: (handles[2].x - handles[3].x) / lowerDist, y: (handles[2].y - handles[3].y) / lowerDist};

                var leftDist = dist(handles[0], handles[3]);
                var leftDir = {x: (handles[3].x - handles[0].x) / leftDist, y: (handles[3].y - handles[0].y) / leftDist};

                var rightDist = dist(handles[1], handles[2]);
                var rightDir = {x: (handles[2].x - handles[1].x) / rightDist, y: (handles[2].y - handles[1].y) / rightDist};

                // draw the horizontal grid lines
                verticalRatios.forEach(function (percentage){
                    var fromX = handles[0].x + upperDir.x * upperDist * percentage;
                    var fromY = handles[0].y + upperDir.y * upperDist * percentage;
                    var toX = handles[3].x + lowerDir.x * lowerDist * percentage;
                    var toY = handles[3].y + lowerDir.y * lowerDist * percentage;
                    context.beginPath();
                    context.moveTo(fromX, fromY);
                    context.lineTo(toX, toY);
                    context.stroke();
                });

                horizontalRatios.forEach(function(percentage){
                    var fromX = handles[0].x + leftDir.x * leftDist * percentage;
                    var fromY = handles[0].y + leftDir.y * leftDist * percentage;
                    var toX = handles[1].x + rightDir.x * rightDist * percentage;
                    var toY = handles[1].y + rightDir.y * rightDist * percentage;
                    context.beginPath();
                    context.moveTo(fromX, fromY);
                    context.lineTo(toX, toY);
                    context.stroke();
                });

                // draw outer box
                context.beginPath();
                context.moveTo(handles[handles.length-1].x, handles[handles.length-1].y);
                handles.forEach(function(handle){
                    context.lineTo(handle.x, handle.y);
                });
                context.stroke();

                /*
                var sq = getSquarePositions();
                context.fillStyle = 'rgba(255,0,0,1.0)';
                sq.forEach(pos => {
                    context.beginPath();
                    var x = pos.x * 908;
                    var y = pos.y * 343;
                    var width = pos.width * 908 - 10;
                    var height = pos.height * 343 - 10;
                    context.rect(x,y,width,height);
                    context.stroke();   

                    context.fillText(`${pos.id}`, x, y+10);                     
                })
                */

                window.requestAnimationFrame(step);
            }

            function dist(a ,b) {
                return Math.sqrt( (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y) );
            }

            function readPage() {
                document.getElementById('savebutton').disabled = true;
                var xhr = new XMLHttpRequest();
                var path = '../doc/' + page.id + '/coordinates';
                var coordinates = handles.map((handle)=>{
                    return {x: handle.x / canvas.width,
                            y: handle.y / canvas.height};
                });
                var json = JSON.stringify(coordinates);

                
                xhr.open('POST', path, true);
                xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                xhr.onload = function(e) {
                    location.reload();
                };
                xhr.send(json);
            }

            function nullifyVotes() {
                document.getElementById('nullifyvotesbutton').disabled = true;
                var xhr = new XMLHttpRequest();
                var path = '../doc/' + page.id + '/nullifyvotes';

                xhr.open('POST', path, true);
                xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                xhr.onload = function(e) {
                    location.reload();
                };
                xhr.send();
            }

            function updateSquareVote(square, vote, element){
                console.log('update %s to %s', square, vote);

                var xhr = new XMLHttpRequest();
                var path = '../doc/' + page.id + '/votes/' + square;
                var body = {value: vote};
                var json = JSON.stringify(body);

                console.log(json);
                element.disabled = true;
                xhr.open('PATCH', path, true);
                xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                xhr.onload = function(e) {
                    element.disabled = false;
                    element.parentElement.style["background-color"] = 'rgb(0,255,0, 0.5)';
                    console.log('done');
                    //location.reload();
                };
                xhr.send(json);
            }

            function saveSquareVote(elementName, id){
                var elements = Array.prototype.slice.call(document.getElementsByName(elementName));
                elements
                    .filter((element)=>{
                        return element.checked
                    })
                    .forEach((element=>{
                        updateSquareVote(id, element.value, element);
                    }));
            }

            function saveSquareMember(square, fieldId) {

                var element = document.getElementById(fieldId);
                var memberId = element.getAttribute('data-seated-member-id');

                console.log('saving %s on square %s in chamber %s for page %s ', memberId, square, book.chamber, page.id);

                var xhr = new XMLHttpRequest();
                var path = '../seatings/' + book.chamber + '/' + square;
                var body = {
                    member_id: memberId,
                    page: page.id
                };
                var json = JSON.stringify(body);

                console.log(json);
                xhr.open('PUT', path, true);
                xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                element.disabled = true;
                xhr.onload = function(e) {
                    element.disabled = false;
                    element.style["background-color"] = 'rgb(200,255,200)';
                    console.log('done saving member');
                };
                xhr.send(json);

            }
        </script>

    div(id="resolvedcontainer" style="max-width: 1000px; max-height: 1000px; position: relative;")
        div(id="resolved-image-overlays")
            style.
                .miniinput input{
                    border: 0;
                    margin: 0;
                    visibility: hidden;
                }

                .miniinput:hover input {
                    visibility: visible;
                }

            script.
                function createResolvedImageOverlay() {
                    var squarePositions = getSquarePositions();    
                    var resolvedImage = document.getElementById('resolvedimage')
                    var resolvedImageOverlays = document.getElementById('resolved-image-overlays')

                    var container = document.createElement("div");
                    container.setAttribute('id', `inscreen-votes`);
                    
                    
                    page.votes.squares.forEach((square, index) => {

                        var pos = squarePositions[index];
                        var element = document.createElement("div");
                        element.style['left'] = `${pos.x * 100}%`;
                        element.style['top'] = `${pos.y * 100}%`;
                        element.style['width'] = `${pos.width * 100}%`;
                        element.style['height'] = `${pos.height * 100}%`;
                        element.style['position'] = 'absolute';
                        element.setAttribute('id', `inscreen-vote-${square.id}`);
                        element.classList.add("miniinput");

                        var voteTypes = ["yes", "no", "refrain", "absent", "missing"]

                        voteTypes.forEach(type => {
                            var input = document.createElement("input")
                            input.setAttribute('type', 'radio');
                            input.setAttribute('name', `inscreen-vote-${square.id}`);
                            input.setAttribute('value', `${type}`);
                            input.checked = square.vote == type;
                            element.appendChild(input);
                        })

                        var save = document.createElement("input")
                        save.setAttribute('type', 'button');
                        save.setAttribute('name', `inscreen-vote-${square.id}-save`);
                        save.setAttribute('value', `s`);
                        save.onclick = ()=>{
                            saveSquareVote(`inscreen-vote-${square.id}`, square.id);
                        }
                        element.appendChild(save);

                        container.appendChild(element);

                    })

                    resolvedImageOverlays.appendChild(container);
                }

        img(id="resolvedimage", src="../image/resolved/#{page.image}", style="width: 100%; height: auto;" onload="createResolvedImageOverlay()")

    
    div.
        <input type="button" id="savebutton" value="Detect votes from grid" onclick="readPage()"/>

        <div id="imagecontainer" style="max-width: 1000px; max-height: 1000px; position: relative;">
            <img id="originalimage" src="../image/#{page.image}" style="position: absolute; width: 100%; height: auto;" onload="onLoaded()"/>
            <canvas id="gridcanvas" style="position: relative; width: 100%; height: auto;">
        </div>
        <input type="button" id="nullifyvotesbutton" value="Nullify votes" onclick="nullifyVotes()"/>
    
        

    style.
        .tt-menu {
            background-color: rgb(255, 255, 255);
            border-style: solid;
            border-spacing: 1px;
            border-width: thin;
        }
        .tt-selectable {
            padding: 5px;
        }
        .tt-suggestion.tt-cursor {
            background-color: rgb(200, 200, 200);
        }
        .twitter-typeahead {
            width: 394px;
        }

    div(id= 'votereference' style='height: 400px; overflow-y: scroll;')
        style.
            table {
                border-spacing: 0px;
                border-collapse: collapse;
            }
        table(border="1")
            tr
                td picture
                td square
                td seat
                td party
                td Y
                td N
                td R
                td A
                td M
                td
                td name
                td
            each square in page.votes.squares
                tr
                    td
                        canvas(name="vote-picture" data-square="#{square.id}" id="vote-picture-#{square.id}" width="100" height="20")
                    td #{square.id}
                    td !{chamber.seat_layout[square.id] || 'empty'}
                    td !{seatings[square.id] ? seatings[square.id].party.join(',') : 'empty'}
                    td
                        input(type="radio", name="vote-#{square.id}", value="yes", checked=square.vote=="yes")
                    td
                        input(type="radio", name="vote-#{square.id}", value="no", checked=square.vote=="no")
                    td
                        input(type="radio", name="vote-#{square.id}", value="refrain", checked=square.vote=="refrain")
                    td
                        input(type="radio", name="vote-#{square.id}", value="absent", checked=square.vote=="absent")
                    td
                        input(type="radio", name="vote-#{square.id}", value="missing", checked=square.vote=="missing")
                    td
                        input(type="button", value="save" onclick="saveSquareVote('vote-#{square.id}', #{square.id})")
                    td(style='width: 400px;')
                        input(id="membername-#{square.id}" class="typeahead" type="text" placeholder="Name" style="width: 100%;" value="#{seatings[square.id] ? seatings[square.id].name+' - '+ seatings[square.id].party.join(',') + ',' + seatings[square.id].constituency.join(',') : ''}")&attributes({'data-seated-member-id': seatings[square.id] ? seatings[square.id].id : ''})
                    td
                        input(type="button", value="save" onclick="saveSquareMember(#{square.id}, 'membername-#{square.id}')")

    script.
        //TODO: FIX THIS
        function fillCanvases() {
            
            var resolvedImage = document.getElementById('resolvedimage');
            var elements = Array.prototype.slice.call(document.getElementsByName("vote-picture"));

            var squarePositions = getSquarePositions();

            elements.forEach(element => {
                let square = parseInt(element.getAttribute('data-square'));
                var position = squarePositions[square];
                var context = element.getContext('2d');
                context.drawImage(resolvedImage, 
                                  position.x * resolvedImage.width, 
                                  position.y * resolvedImage.height,
                                  position.width * resolvedImage.width, 
                                  position.height * resolvedImage.height,
                                  0,
                                  0,
                                  element.width, 
                                  element.height);
            });
        }

        // fillCanvases();

    div(id='duplets')
        table(style='background-color: red')
            each member in page.votes.squares.map(square => seatings[square.id]).filter(Boolean).filter((val, i, self) => self.findIndex(e => e.id === val.id) !== i)
                tr
                    td
                        !{member.name} (!{member.id}) is double

    div(id='partyvotes')
        table(border=1)
            tr
                td party
                td yes
                td no
                td refrain
                td absent
                td missing
                td counted total
                td chamber total
            -var totPartyMembers = 0
            each party in unique(Object.keys(partyVotes).concat(Object.keys(chamber.allocation)))
                tr
                    -var votes = partyVotes[party] || {yes:0, no: 0, refrain: 0, absent: 0, missing: 0}
                    td !{party}
                    td !{votes.yes}
                    td !{votes.no}
                    td !{votes.refrain}
                    td !{votes.absent}
                    td !{votes.missing}
                    td !{votes.yes + votes.no + votes.refrain + votes.absent + votes.missing}
                    td !{chamber.allocation[party] || '-'}
                    - totPartyMembers += votes.yes + votes.no + votes.refrain + votes.absent + votes.missing
            tr
                td 
                td !{page.votes.total.yes}
                td !{page.votes.total.no}
                td !{page.votes.total.refrain}
                td !{page.votes.total.absent}
                td !{page.votes.total.missing}
                td !{totPartyMembers}
                td !{chamber.seats}



    - function sortSurname(a, b) {
    -   var nameA = a.name.split(' ');
    -   var surnameA = nameA[nameA.length-1];
    -   var nameB = b.name.split(' ');
    -   var surnameB = nameB[nameB.length-1];
    -   return surnameA.localeCompare(surnameB);
    - }
    -
    - function isFirstUnique(value, index, self) {
    -     return self.indexOf(value) === index;
    - }
    - function unique(array) {
    -     return array.filter(isFirstUnique);
    - }
    - 
    - function getConstituencies() {
    -     var c = page.votes.squares.map( (square) => {
    -               return seatings[square.id]
    -           }).filter(Boolean).flatMap( (member) => {
    -               return member.constituency
    -           });
    -     return unique(c)
    - }
    -
    - function getNumberOfVotesPerConstituency() {
    -     var result = Object.keys(chamber.constituency_allocation).reduce((r, c) => {
    -         r[c] = 0;
    -         return r;
    -     }, {});
    -  
    -     page.votes.squares.map( (square) => {
    -         return seatings[square.id]
    -     }).filter(Boolean).reduce((result, member) => {
    -         var consts = member.constituency.filter(a => Object.keys(result).indexOf(a) !== -1);
    -         result[consts.join(',')] = (result[consts.join(',')] || 0) + 1;
    -         return result;
    -     }, result);
    -     return result;
    - }

    div(id='chamber-constituency-allocation')
        table(border=1)
            tr
                td constituency
                td counted allocation
                td chamber allocation
            - var constituencies = getNumberOfVotesPerConstituency()
            - var totCountedConstituency = 0
            - var totChamberConstituency = 0
            each constituency in Object.keys(constituencies)
                tr
                    td !{constituency}
                    td !{constituencies[constituency] || 0}
                    - totCountedConstituency += constituencies[constituency] || 0
                    td !{chamber.constituency_allocation[constituency] || 0}
                    - totChamberConstituency += chamber.constituency_allocation[constituency] || 0
            tr
                td total
                td !{totCountedConstituency}
                td !{totChamberConstituency}

    div(id='party-members')
        table(border=1)
            each constituency in Object.keys(chamber.constituency_allocation)
                tr
                    td 
                        b !{constituency}
                each party in unique(Object.keys(partyVotes).concat(Object.keys(chamber.allocation)))
                    tr
                        td(style='padding-left: 1em') 
                            b !{party}
                    each member in page.votes.squares.map(square => seatings[square.id]).filter(Boolean).filter(member => member.party.indexOf(party) >= 0).filter(member => member.constituency.indexOf(constituency) >= 0).sort(sortSurname)
                        tr
                            td(style='padding-left: 2em') !{member.name + ' (' + member.party.join(', ') + ')'}

    div(id='bookindex')
        each book in book_index
            div.
                !{book.start_document_id}. <a href="/pageeditor/!{book.start_document_id}"><b>#{book.start_year}-#{book.end_year}</b> #{book.book}#{book.book_letter}-#{book.book_number_type} <i>#{book.chamber} chamber</i></a>


    script.
        $(document).ready(()=>{
            var parties = new Bloodhound({
              datumTokenizer: function(obj){ return obj.name.split(' ')},
              queryTokenizer: Bloodhound.tokenizers.whitespace,
              identify: function(obj) { return obj.name + obj.party.join('') + obj.constituency.join('') ; },
              prefetch: {
                cache: false,
                url: '../members',
              }
            });

            $('#votereference .typeahead').typeahead({
              hint: true,
              highlight: true,
              minLength: 1
            },
            {
              display: function(data){ return data.name + ' - ' + data.party.join(',') + ', ' + data.constituency.join(',') },
              templates: {
                suggestion: function(data){ return '<div>' + data.name + ' ('+ data.party.join(',') +')'+  ' - ' + data.constituency.join(',') + '</div>'; }
              },
              name: 'parties',
              source: parties,
              limit: 60
            });

            $('#votereference .typeahead').bind('typeahead:select', function(ev, suggestion) {
              console.log('Selection: ', suggestion);
              ev.target.setAttribute('data-seated-member-id', suggestion.id);
            });
        });
